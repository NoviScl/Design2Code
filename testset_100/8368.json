{"1": "A simpler Arbitrary for the Diamond kata", "2": "Toggle navigation", "3": "ploeh blog", "4": "About", "5": "Archive", "6": "Hire Me", "7": "Pages", "8": "A simpler Arbitrary for the Diamond kata", "9": "by Mark Seemann", "10": "There's a simple way to make FsCheck generate letters in a particular range.", "11": "In my", "12": "post about the Diamond kata with FsCheck", "13": ", I changed the way", "14": "FsCheck", "15": "generates char values, using this custom Arbitrary (essentially a random value generator):", "16": "type", "17": "Letters", "18": "=", "19": "static", "20": "member", "21": "Char() =", "22": "Arb", "23": ".", "24": "Default", "25": ".Char() |>", "26": "Arb", "27": ".filter (", "28": "fun", "29": "c", "30": "->", "31": "'A'", "32": "<= c && c <=", "33": "'Z'", "34": ")", "35": "This uses the default, built-in Arbitrary for char values, but filters its values so that most of them are thrown away, and only the letters 'A'-'Z' are left. This works, but isn't particularly efficient.", "36": "It's also possible to instruct FsCheck to generate values from a particular set of valid values, which seems like an appropriate action to take here:", "37": "type", "38": "Letters", "39": "=", "40": "static", "41": "member", "42": "Char() =", "43": "Gen", "44": ".elements [", "45": "'A'", "46": "..", "47": "'Z'", "48": "] |>", "49": "Arb", "50": ".fromGen", "51": "Instead of using", "52": "Arb.Default.Char()", "53": "and filtering the values generated by it, this implementation uses", "54": "Gen.elements", "55": "to create a Generator of the values 'A'-'Z', and then an Arbitrary from that Generator.", "56": "Much simpler, but now it's also clear that this custom Arbitrary will be used to generate 100 test cases (for each property) from a set of 26 values; that", "57": "doesn't seem right...", "58": "\u2190 Previous", "59": "Archive", "60": "Next \u2192", "61": "Wish to comment?", "62": "You can add a comment to this post by", "63": "sending me a pull request", "64": ".", "65": "Published", "66": "Monday, 23 February 2015 19:50:00 UTC", "67": "Tags", "68": "Unit Testing", "69": "174", "70": "F#", "71": "101", "72": "FsCheck", "73": "15", "74": "Support the blog", "75": "Buy my book", "76": "Code That Fits in Your Head", "77": "Buy my book about", "78": "Dependency Injection", "79": "Watch my Pluralsight courses", "80": "Watch my Clean Coders videos", "81": "Public speaking schedule", "82": "Tweet", "83": "\"Our team wholeheartedly endorses Mark. His expert service provides tremendous value.\"", "84": "Hire me!", "85": "Published:", "86": "Monday, 23 February 2015 19:50:00 UTC", "87": "\u00a9 Mark Seemann 2015", "88": "with help from", "89": "Jekyll Bootstrap", "90": "and", "91": "Twitter Bootstrap"}